Problem 01. 
  Hiển thị tùy chọn tại vị trí con nhắc?
Problem 02. 
  Lưu toàn bộ lệnh đang gõ và lịch sử phiên hiện hành vào bộ nhớ 

Abstraction need
		i. Clearly design 
		ii. Not design for change (Change behavior & change system requirements => Must change design)
		iii. Completely API
			<=> If fill enough code into Interface => Works
		iv(*). Deal with not-sure code_able.

Problem 01. Design for curses only?
Problem 02. Design for both curses & boost::msm
Problem 03. Design for both curses & other msm
Problem 04. Detail Curses app abstraction for CommandLine ?
Problem 05. Detail curses app abstraction for QuizWindow ?
Problem 06. Detail curses app abstraction for Memory score ?
Problem 07. Two fds that help ?
Problem 08. Curses independent design ?
Problem 09. Design clearly works for ICurses & ICmdLine?
Problem 10. Design for two ICurses.UI works concurrently with ICurses ?
Problem 11. Design for keyboard handling works with two ICursesUI Conccurently?
Problem 12. Design for mouse & keyboard handling works with two ICursesUI ?
Problem 13. Design for ICmdLine & IWinQuiz ?
Problem 14. Design for IWinQuiz & IDB ?

Problem 15. Design list command support ?
Problem 16. Current cursor autocomplete design ?
Problem 17. Datastructure for ICmdLine?
Problem 18. Datastructure for IWinquiz ?
Problem 19. Design for doing quiz ?

Problem 20. Window resize ?

Problem Tree(2,1) 1
	Problem 1. Enter => Go to the next line 
	Problem 1.1. Draw cursor # at the current line
	Problem 1.2. Process <- (Backspace key)
	Problem 2. Show menu just under the Current key
	Problem 2.1. Show menu on the top of current word if Screen too small to display under the current Key
	Problem 2.2. Remove the Menu's Window's topbar.

Problem Tree(2,1) 2.
	1. How do we design onTyping for working correctly & smoothly?
	2. How do we design a seperated QuizWindow module for doing quiz?
	1.1. onTyping occurs when cursor at the middle of command, how do system react ?
	1.2. How do we design onEnter behavior?
	2.1. How do the program redraw CmdLine text after closing QuizWindow ?
	2.2. What is the program's mechanism for outputing QuizWindow log into CmdLine ?

Problem Tree(2,1) 3.
	1. List all QuizWindows's items & components ?
	2. List all AboutWindow's item & components ?
	1.1. What is datastructre for QuizWindow ?
	1.2. How do program display Stopwatch for quizwindow ?
	2.1. How do program design Datastructure for AboutWindows ?
	2.2. How do the program design Auto window that automatically close if no-event detected ?

Problem Tree[2,1] 4.
	1. How the program design the abstration of ICurses switching between ICmdLine & IWindowQuiz ?
	2. Name of datastore ?
	1.1. The abstraction design of redrawing an area which is overlapped by two UI ?
	1.2. The abstraction design of sending & receiving events between ICmdLine & IWindowQuiz ?
	2.1. What is the Abstract design of Automatic saving state & loading history state ?
	2.2. [?]

Answer 01.
Answer04.
----------
	ICursesCmdLine
		initialize()
		registerEvents()	// Register every Event Handler
Answers 08
----------
	The design:
		ICurses = 
		{
			curses program and
			the most complicated source code and implementation ever in Human history :) ;
			and it works in a seperated thread (not interrupt anyone)
		}

		IOtherProgram = { Program which works with Ncurses }
		Design is 
			IOtherProgram->sendEvent(icurses)
			ICurses->sendEvent(iotherprogram)
		=> This design do not care about what curses is, because ICurses is totally independent.
Answer 09.
----------
	The design
	ICurses
	{
		Most-inner-interaction complex in the world
	}

	ICmdLine
	{
		1 billions line of code in one file.
	}

	Assume that everything (which is not unlogic) is impossible. 
	Design for every detail interface between ICmdLine & ICurses (curses lib).

		ICmdLine.Model = 
		{
			string typo;
			string currentword;
			vector<string> typo_history;
			vector<string> out_put_history;
		}

		ICurses.UI
		{
			// Could implement whatever UI needs for Terminal inside ncurses ability
		}

		ICmdLine.UI : public ICurses.UI {}

	IProgram = 
	{ 
		ICmdLine.UI;
		ICmdLine.Model;
		ICurses
	}

Answer 10.
----------
	Use cases 
		u1 = ICmdLine.UI
		u2 = ICmdLine.UI
	For u1 & u2 take input together => u1 input first then switch to u2 (and vice-versa)
		ICurses.focus(u1)
		ICurses.focus(u2)
	For u1 & u2 waiting Keyboard together
		u_active = { u which is active }
		ICurses.waitKey()
			=> u_active => Recive
	For u1 & u2 waiting Mouse event
		u_active = { u which is active }
		onMouseEvent(e)
			u_active.mouseEvent(e)

Answer 11.
----------
	u1 = ICurses.UI1
	u2 = ICurses.UI2
	ic = ICurses (Curses Main)

	Flow chart of Keyboard Handling

		ic.AddUI(u1);
		ic.AddUI(u2);

		ic.start();
		u1.start();
		u2.start();

		ic.onKeyboard(e)
		u = ic.getActive()
		u.onKeyboard(e)


Answer 12.
----------
	ic = ICurses
	u1 = ICurses.UI
	u2 = ICurses.UI

	Keyboard/Mouse Handling
		ic.addUI(u1);
		ic.addUI(u2);

		ic.start();
		u1.start();
		u2.start();

		e1 = ic.onKeyboard();
		e2 = ic.onMouse();

		ic.enqueueEvent(e1);
		ic.enqueueEvent(e2);

		us = ic.getActives();
		for u : us		
			ic.sendEvent(u, e1)
			ic.sendEvent(u, e2)

Answer 13.
----------
	ic = ICurses
	icm = ICmdLine
	grm = ICmdLine.Grammar
	iqu = IWinQuiz

	icm.add(grm)
	ic.addUI(icm)
	ic.addUI(iqr)

	CmdLine
		icm.onKeyboard()
			icm.onTyping()
			icm.Grammar.show()
			icm.Grammar.onSelect()
		icm.onEnter
			icm.Grammar.check()
			icm.onExeCmd()
		icm.onMouse()
			___	
	WinQuiz
		ic.setActive(iqu)
		iqu.onEnter()
		iqu.onCancel()

	Curses
		ic.initialize()
		ic.start()
			iqu.onKeyboard()
			iqu.onEnter()

	User case - Enter cmdline, call WindowQuiz: 
		sequence([
			prog(init),
			prog(main_curses),
			prog(end)
		])

		prog(main_curses) = parallel([
			prog(icmdline),
			prog(iwinquiz)
		])

	Note - More about abstraction
		prog(n, input, output) = { a program named N which has 1..billions lines of ultimately complex code }

		parallel([a1,a2,...,an], input, output) = 
			{ A program which has n program run parallel }

		sequence([a1, a2, ..., an], input, output) = 
			{ A program which has n program run in sequence }

		unknown([a1,a2,...,an], input, output)
			= { a program contains n program a1,a2,...,an. And these program can work in any order, any-contrainst, from simplest to most complex }

		prog(curses)
			= sequence([
				prog(init),
				prog(main_curses),
				prog(end)
			])
		prog(curses)[main_curses] = 
			unknown([ prog(keyboard), prog(mouse), prog(icmdline), prog(iquiz) ])
Answer 14.
----------
	iquiz = IWinquiz
	idb = IDB 

	iquiz.doModal()
	iquiz.onCompleteQuiz()
	idb.saveHighScore()

Answer 15.
----------
	Commands:
		quiz find
		quiz do
		quiz add
		exit

Answer 16
----------
	You have to rewrite Ncurses on specific position.
	Redraw whole screen :)
	or Redraw just the current line.

Answer 17.
----------
	ICmdLine
	{
		string currentLine;
		string currentWord;
		int currenCursor;
		vector<string> cmdHistory;
		vector<string> output;
	}


Answer ProblemTree(2,1)
---------------
	Problem 1.
		Go to the next line by printw("\n") instead of move(y+1,x)
		[Done]
	Problem 1.1. 
		[Done]
	Problem 1.2.
		Backspace Key <=> 
	Problem 2.
		Change (y,x) position => [Done]
	Problem 2.1.
		int CCmdLineUI::UI::Layout::arrangePopup(
			int candidatey, 
			int candidatex, 
			int screenRows, 
			int screenCols, 
			int popupRows, 
			int popupCols, 
			int& outputy, 
			int& outputx)
	Problem 2.2.
		Change set_menu_sub() parameters.

Answer ProblemTree(2,1).2
---------------
1. onTyping
	ICmdLineUI->Event->onTyping
		ICmdLineUI->UI->autoComplete()->show()
			ICmdLineUI->UI->autoComplete()->onEnter() || 
			ICmdLineUI->UI->autoComplete()->onCancel()

2. onquiz
	ICmdLineUI->Event->onCmd
		ICmdLineUI->UI->Quiz->show()		
			ICmdLineUI->UI->Quiz->Event->onEnter()
			ICmdLineUI->UI->Quiz->Event->onCancel()
			ICmdLineUI->UI->Quiz->UI->printScore()
		ICmdLineUI->UI->Quiz->close()

1.1. 
	ICmdLineUI->Event->onTyping
		ICmdLineUI->UI->autoComplete()->show()
			ICmdLineUI->UI->autoComplete()->onEnter()
				ICmdLineUI->Grammar()->displayText()

1.2. 
	ICmdUI->main
		ICmdUI->Event->onEnter()
			ICmdUI->Grammar->checkCommandGrammar()
				ICmdUI->Event->onExecCmd()
				ICmdUI->Event()->onInvalidCmd()

2.1. 
	Dummy solution:
		ICmdUI->UI->redraw()

2.2. 
	ICmdUI->IO->write()

Answer Problem Tree(2,1) 3.
------------------------------
1. List all QuizWindows's items & components ?
	quiz_code: text
	quiz_created_date: text
	quiz_modified_date: text
	quiz_author: text

	quiz_name: text
	quiz_list: text[10]

2. List all AboutWindow's item & components ?
	Program name
	Version
	Author
	Email
	Official page
	Donation

1.1. What is datastructre for QuizWindow ?
	typdef struct 
	{
		std::string code;
		std::string name;
		std::string author;

		long created_date;
		long modified_date;

		vector<string> listquiz;
	} QuizModel;
1.2. How do program display Stopwatch for quizwindow ?
2.1. How do program design Datastructure for AboutWindows ?
2.2. How do the program design Auto window that automatically close if no-event detected ?

Problem Tree[2,1] 4.
--------------------
1. 
	ed = IEventDispatcher

	CCursesApp	
		initCurses()
		mainProcedure() {
			ICursesUI* pUI = getActiveUI();
			
			this->saveCurses();
			pUI->initCurses();

				pUI->onEvent() {
					Internal work <=> No Prob
					Externalworks without quiting this UI
						SendEvent rather than directly call functions
					External work requires quitting the UI
						-> must quit the main procecure first
				}

			this->restoreCurses();
		}

		onEvent(e)
		{
			ed->sendEvent(this, pUI, ON_CLOSE)			
		}

		stopCurses()

	Single Threading
	----------


==========>
 ICurses ----> IKeyboard  <==> IKeyboard ----> ICurses
    Program = 
        IThread(ICurses, IKeyboard, IMouse)
    Interform?
        // Time based
        ICurses->Main       
        {
            evt1 = IKeyboard->getEvent();
            evt2 = IMouse->getEvent();

            if (evt1) {
                app->enqueueEvent(evt1);
                app->ui->getActive->enqueueEvent(evt1);
            }
            if (evt2) {
                app->enqueueEvent(evt2);
                app->ui->getActive->enqueueEvent(evt2);
            }
            
            {
                app->processLatestEvent();
                app->ui->getActive->processLatestEvent();
            }
        }
    StopWatch? [/*-*/]
        IWinQuiz
            ->onTimer()
                ->UpdateWatch()
    What happens if 
        Is Executing an Event =>
            Then executing another?